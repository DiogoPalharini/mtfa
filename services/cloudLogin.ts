// Servi√ßo de login online compat√≠vel com React Native usando Axios
import axios, { AxiosInstance, AxiosResponse } from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

const SERVER_CONFIG = {
  baseUrl: 'https://mtfa.freenetic.ch/api/login.php',
  timeout: 10000, // 10 segundos
  apiKey: 'gK7@p#R9!zW3*sV5bN8m$qX1aC4dF7hJ',
};

export interface CloudUser {
  id: number;
  name: string;
  email: string;
  level: number;
  sessionId?: string;
}

export interface LoginResponse {
  success: boolean;
  message: string;
  userData?: CloudUser;
  sessionId?: string;
}

class CloudLoginService {
  private isConnected = false;
  private apiClient: AxiosInstance;
  private sessionId: string | null = null;

  constructor() {
    // Criar inst√¢ncia do Axios para a nova API JSON
    this.apiClient = axios.create({
      baseURL: SERVER_CONFIG.baseUrl,
      timeout: SERVER_CONFIG.timeout,
      validateStatus: (status) => {
        // Aceitar todos os status para poder tratar erros adequadamente
        return status >= 200 && status < 600;
      },
    });

    // Carregar sess√£o salva na inicializa√ß√£o
    this.loadSavedSession();
  }

  // Carregar sess√£o salva do AsyncStorage
  private async loadSavedSession(): Promise<void> {
    try {
      const savedSessionId = await AsyncStorage.getItem('PHPSESSID');
      if (savedSessionId) {
        this.sessionId = savedSessionId;
      }
    } catch (error) {
      // Silenciar erro de carregamento
    }
  }

  // Salvar sess√£o no AsyncStorage
  private async saveSession(sessionId: string): Promise<void> {
    try {
      await AsyncStorage.setItem('PHPSESSID', sessionId);
      await AsyncStorage.setItem('sessionTimestamp', Date.now().toString());
      this.sessionId = sessionId;
    } catch (error) {
      // Silenciar erro de salvamento
    }
  }

  // Extrair PHPSESSID do header Set-Cookie (vers√£o melhorada)
  private extractSessionId(setCookieHeader: string): string | null {
    try {
      // Primeiro, tentar o formato padr√£o
      let match = setCookieHeader.match(/PHPSESSID=([^;]+)/);
      if (match) return match[1];
      
      // Se n√£o encontrou, tentar sem o 'PHPSESSID=' (caso seja s√≥ o valor)
      match = setCookieHeader.match(/^([a-f0-9]{32})$/);
      if (match) return match[1];
      
      return null;
    } catch (error) {
      console.error('Erro ao extrair sessionId:', error);
      return null;
    }
  }

  // Fun√ß√£o para extrair cookie de diferentes formas dos headers
  private extractCookieFromHeaders(headers: any): string | null {
    try {
      // Tentar diferentes varia√ß√µes do header Set-Cookie
      const possibleHeaders = [
        headers['set-cookie'],
        headers['Set-Cookie'],
        headers['SET-COOKIE'],
        headers['set-cookie']?.[0],
        headers['Set-Cookie']?.[0],
        headers['SET-COOKIE']?.[0]
      ];

      for (const header of possibleHeaders) {
        if (header) {
          const sessionId = this.extractSessionId(header);
          if (sessionId) {
            // Cookie encontrado em header
            return sessionId;
          }
        }
      }

      // Se n√£o encontrou em nenhum header, tentar extrair de todos os headers como string
      const allHeadersString = JSON.stringify(headers);
      const match = allHeadersString.match(/PHPSESSID[=:]([a-f0-9]{32})/);
      if (match) {
        // Cookie encontrado em string de headers
        return match[1];
      }

      return null;
    } catch (error) {
      console.error('Erro ao extrair cookie dos headers:', error);
      return null;
    }
  }

  // Gerar um cookie v√°lido no formato do servidor PHP (32 caracteres hexadecimais)
  private generateValidSessionId(): string {
    const chars = '0123456789abcdef';
    let result = '';
    for (let i = 0; i < 32; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  // Gerar um cookie baseado no username para consist√™ncia
  private generateUserBasedSessionId(username: string): string {
    // Criar um hash simples baseado no username para consist√™ncia
    let hash = 0;
    for (let i = 0; i < username.length; i++) {
      const char = username.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    
    // Converter para hexadecimal e garantir 32 caracteres
    const hexHash = Math.abs(hash).toString(16).padStart(8, '0');
    const chars = '0123456789abcdef';
    let result = hexHash;
    
    // Completar com caracteres aleat√≥rios para atingir 32 caracteres
    while (result.length < 32) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    
    return result.substring(0, 32);
  }

  // Criar resposta de login
  private createLoginResponse(userData: CloudUser, sessionId: string): LoginResponse {
    const userWithSession: CloudUser = {
      ...userData,
      sessionId: sessionId
    };

    console.log('üîß Criando resposta de login:', {
      success: true,
      sessionId: sessionId,
      userData: userWithSession
    });

    return {
      success: true,
      message: 'Login bem-sucedido',
      sessionId: sessionId,
      userData: userWithSession
    };
  }


  // Verificar conectividade com o servidor
  async checkConnection(): Promise<boolean> {
    try {
      const response = await axios.head(SERVER_CONFIG.baseUrl, {
        timeout: 5000,
      });
      
      this.isConnected = response.status === 200;
      return this.isConnected;
      
    } catch (error) {
      this.isConnected = false;
      return false;
    }
  }

  // Fun√ß√£o principal de login usando Axios
  async loginUser(username: string, password: string): Promise<LoginResponse> {
    try {
      console.log('üöÄ ===== INICIANDO PROCESSO DE LOGIN =====');
      console.log('üîê Enviando dados de login para nova API...');
      console.log('üåê URL da API:', SERVER_CONFIG.baseUrl);
      console.log('üîë API Key:', SERVER_CONFIG.apiKey);
      console.log('üë§ Usu√°rio:', username);
      console.log('üîí Senha:', password ? '***' : 'VAZIA');
      
      // Criar payload JSON para a nova API
      const loginData = {
        email: username,
        password: password
      };
      
      console.log('üì§ Payload JSON criado:', JSON.stringify(loginData));
      console.log('üìã Headers que ser√£o enviados:', {
        'Content-Type': 'application/json',
        'X-API-KEY': SERVER_CONFIG.apiKey,
      });
      
      // Fazer requisi√ß√£o POST com JSON e API key
      console.log('üåê Fazendo requisi√ß√£o POST...');
      const response: AxiosResponse = await this.apiClient.post(
        '',
        loginData,
        {
          headers: {
            'Content-Type': 'application/json',
            'X-API-KEY': SERVER_CONFIG.apiKey,
          },
        }
      );
      
      console.log('üì° ===== RESPOSTA RECEBIDA =====');
      console.log('üìä Status Code:', response.status);
      console.log('üìã Headers da resposta:', JSON.stringify(response.headers, null, 2));
      console.log('üìÑ Dados da resposta:', JSON.stringify(response.data, null, 2));
      console.log('üîç Tipo dos dados:', typeof response.data);
      
      // Verificar se a resposta √© JSON v√°lida
      console.log('üîç ===== ANALISANDO RESPOSTA =====');
      console.log('‚úÖ Status √© 200?', response.status === 200);
      console.log('‚úÖ Tem dados?', !!response.data);
      console.log('‚úÖ Dados n√£o s√£o null?', response.data !== null);
      console.log('‚úÖ Dados n√£o s√£o undefined?', response.data !== undefined);
      
      if (response.status === 200 && response.data) {
        const apiResponse = response.data;
        console.log('üìã Estrutura da resposta:', {
          hasSuccess: 'success' in apiResponse,
          successValue: apiResponse.success,
          hasUser: 'user' in apiResponse,
          hasError: 'error' in apiResponse,
          errorValue: apiResponse.error
        });
        
        if (apiResponse.success === true) {
          // Login bem-sucedido
          console.log('üéâ ===== LOGIN BEM-SUCEDIDO =====');
          console.log('üë§ Dados do usu√°rio recebidos:', JSON.stringify(apiResponse.user, null, 2));
          
          // Gerar um sessionId baseado no usu√°rio para consist√™ncia
          const sessionId = this.generateUserBasedSessionId(username);
          console.log('üîë SessionId gerado:', sessionId);
          
          await this.saveSession(sessionId);
          console.log('üíæ SessionId salvo no AsyncStorage');
          
          // Criar resposta com dados do usu√°rio da API
          const loginResponse = this.createLoginResponse(apiResponse.user, sessionId);
          console.log('üì§ Resposta final criada:', JSON.stringify(loginResponse, null, 2));
          
          return loginResponse;
          
        } else {
          // Login falhou - usar mensagem de erro da API
          console.log('‚ùå ===== LOGIN FALHOU =====');
          console.log('üö´ success = false');
          console.log('üí¨ Mensagem de erro:', apiResponse.error);
          
          const errorMessage = apiResponse.error || 'Erro de autentica√ß√£o';
          throw new Error(errorMessage);
        }
        
      } else if (response.status >= 400) {
        // Tratar erros HTTP diretamente da resposta
        console.log('‚ùå ===== ERRO HTTP =====');
        console.log('üìä Status Code:', response.status);
        console.log('üí¨ Dados do erro:', response.data);
        
        const errorMessage = response.data?.error || `Erro do servidor (${response.status})`;
        throw new Error(errorMessage);
      } else {
        console.log('‚ùå ===== RESPOSTA INV√ÅLIDA =====');
        console.log('üìä Status Code:', response.status);
        console.log('üìÑ Dados:', response.data);
        
        throw new Error('Resposta inv√°lida do servidor');
      }
      
    } catch (error) {
      console.log('üí• ===== ERRO CAPTURADO =====');
      console.error('‚ùå Erro completo:', error);
      console.log('üîç Tipo do erro:', typeof error);
      console.log('üîç √â inst√¢ncia de Error?', error instanceof Error);
      console.log('üîç √â AxiosError?', axios.isAxiosError(error));
      
      if (axios.isAxiosError(error)) {
        console.log('üì° ===== DETALHES DO ERRO AXIOS =====');
        console.log('üìä Tem response?', !!error.response);
        console.log('üìä Tem request?', !!error.request);
        console.log('üìä Tem message?', !!error.message);
        console.log('üìä Tem code?', !!error.code);
        
        if (error.response) {
          const status = error.response.status;
          const responseData = error.response.data;
          
          console.log('üìä Status do erro:', status);
          console.log('üìÑ Dados do erro:', JSON.stringify(responseData, null, 2));
          console.log('üìã Headers do erro:', JSON.stringify(error.response.headers, null, 2));
          
          if (status === 403) {
            // Erro de API key ou licen√ßa expirada
            console.log('üö´ Erro 403 - Acesso n√£o autorizado');
            const errorMessage = responseData?.error || 'Acesso n√£o autorizado';
            throw new Error(errorMessage);
          } else if (status === 401) {
            // Credenciais inv√°lidas
            console.log('üö´ Erro 401 - Credenciais inv√°lidas');
            const errorMessage = responseData?.error || 'Email ou senha inv√°lidos';
            throw new Error(errorMessage);
          } else if (status === 400) {
            // Dados inv√°lidos
            console.log('üö´ Erro 400 - Dados inv√°lidos');
            const errorMessage = responseData?.error || 'Dados de login inv√°lidos';
            throw new Error(errorMessage);
          } else if (status === 500) {
            console.log('üö´ Erro 500 - Erro interno do servidor');
            throw new Error('Erro interno do servidor. Tente novamente.');
          } else {
            console.log(`üö´ Erro ${status} - Erro do servidor`);
            throw new Error(`Erro do servidor (${status}). Tente novamente.`);
          }
        } else if (error.request) {
          console.log('üåê ===== ERRO DE CONEX√ÉO =====');
          console.log('üì° Request feito mas sem response');
          console.log('üîç Detalhes do request:', error.request);
          throw new Error('Sem conex√£o com o servidor. Verifique sua internet.');
        } else {
          console.log('‚öôÔ∏è ===== ERRO DE CONFIGURA√á√ÉO =====');
          console.log('üîß Erro na configura√ß√£o da requisi√ß√£o');
          console.log('üí¨ Mensagem:', error.message);
          throw new Error('Erro na configura√ß√£o da requisi√ß√£o.');
        }
      } else if (error instanceof Error) {
        console.log('üìù ===== ERRO PADR√ÉO =====');
        console.log('üí¨ Mensagem:', error.message);
        console.log('üìö Stack:', error.stack);
        throw error;
      } else {
        console.log('‚ùì ===== ERRO DESCONHECIDO =====');
        console.log('üîç Valor do erro:', error);
        throw new Error('Erro inesperado durante o login.');
      }
    }
  }

  // Criar inst√¢ncia do Axios com interceptor para cookies autom√°ticos
  createAuthenticatedClient(): AxiosInstance {
    const client = axios.create({
      baseURL: 'https://mtfa.freenetic.ch',
      timeout: SERVER_CONFIG.timeout,
    });

    // Interceptor para adicionar cookie automaticamente
    client.interceptors.request.use((config) => {
      if (this.sessionId) {
        config.headers.Cookie = `PHPSESSID=${this.sessionId}`;
      }
      return config;
    });

    return client;
  }

  // Fazer logout (limpar sess√£o)
  async logout(): Promise<void> {
    try {
      await AsyncStorage.removeItem('PHPSESSID');
      await AsyncStorage.removeItem('sessionTimestamp');
      this.sessionId = null;
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  }

  // Verificar se usu√°rio est√° logado
  isLoggedIn(): boolean {
    return this.sessionId !== null;
  }

  // Verificar se h√° uma sess√£o v√°lida salva
  async hasValidSession(): Promise<boolean> {
    try {
      const sessionId = await AsyncStorage.getItem('PHPSESSID');
      return sessionId !== null && sessionId.length > 0;
    } catch (error) {
      return false;
    }
  }

  // Verificar se a sess√£o √© v√°lida fazendo uma requisi√ß√£o ao servidor
  async validateSession(): Promise<boolean> {
    try {
      if (!this.sessionId) {
        return false;
      }

      // Para evitar erros 403, vamos usar uma abordagem mais simples
      // Se temos um sessionId salvo, consideramos v√°lido por um tempo limitado
      const sessionData = await AsyncStorage.getItem('sessionTimestamp');
      if (sessionData) {
        const timestamp = parseInt(sessionData);
        const now = Date.now();
        const sessionDuration = 24 * 60 * 60 * 1000; // 24 horas
        
        if (now - timestamp < sessionDuration) {
          return true;
        }
      }
      
      return false;
    } catch (error) {
      console.error('Erro ao validar sess√£o:', error);
      return false;
    }
  }

  // Obter ID da sess√£o atual
  getSessionId(): string | null {
    return this.sessionId;
  }

  // Obter status de conex√£o atual
  getConnectionStatus(): boolean {
    return this.isConnected;
  }
}

// Inst√¢ncia singleton do servi√ßo
export const cloudLoginService = new CloudLoginService();

// Configura√ß√µes exportadas
export { SERVER_CONFIG };


