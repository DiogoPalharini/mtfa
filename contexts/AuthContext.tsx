import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { hybridAuthService, CloudUser } from '../services/HybridAuthService';
import { localAuthService } from '../services/localAuthService';
import { syncService } from '../services/syncService';
import { useErrorTranslations } from '../hooks/useErrorTranslations';

interface AuthContextValue {
  user: CloudUser | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (username: string, password: string) => Promise<{ success: boolean; message: string }>;
  logout: () => Promise<void>;
  checkSession: () => Promise<boolean>;
}

const AuthContext = createContext<AuthContextValue | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<CloudUser | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const { t } = useErrorTranslations();

  // Verificar sess√£o salva na inicializa√ß√£o
  useEffect(() => {
    checkSavedSession();
    
    // Configurar callback para quando a sess√£o expirar automaticamente
    hybridAuthService.setSessionExpiredCallback(() => {
      handleSessionExpired();
    });
    
    // Cleanup: remover callback quando o componente for desmontado
    return () => {
      hybridAuthService.setSessionExpiredCallback(() => {});
    };
  }, []);

  const checkSavedSession = async () => {
    try {
      setIsLoading(true);
      console.log('üîç Verificando sess√£o salva...');
      
      // Verificar se h√° usu√°rio logado usando o sistema h√≠brido
      const isLoggedIn = hybridAuthService.isLoggedIn();
      console.log('üîç Usu√°rio est√° logado (h√≠brido)?', isLoggedIn);
      
      // Verificar se h√° credenciais locais tamb√©m
      const hasLocalCredentials = await localAuthService.hasStoredCredentials();
      console.log('üîç Tem credenciais locais?', hasLocalCredentials);
      
      if (isLoggedIn) {
        // Usu√°rio est√° logado, obter dados do usu√°rio
        const currentUser = hybridAuthService.getCurrentUser();
        console.log('üîç Dados do usu√°rio atual (h√≠brido):', currentUser);
        
        if (currentUser) {
          setUser(currentUser);
          setIsAuthenticated(true);
          console.log('‚úÖ Usu√°rio autenticado via dados salvos');
        }
      } else if (hasLocalCredentials) {
        // N√£o h√° usu√°rio logado, mas h√° credenciais locais
        console.log('üîç Sem usu√°rio logado, mas h√° credenciais locais dispon√≠veis');
        // N√£o limpar dados, permitir login offline
      } else {
        // N√£o h√° nem usu√°rio logado nem credenciais locais
        console.log('üîç Sem usu√°rio logado nem credenciais locais');
        await clearAuthData();
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar sess√£o:', error);
      // Em caso de erro, n√£o limpar dados automaticamente
('‚ö†Ô∏è Erro na verifica√ß√£o, mantendo estado atual');
    } finally {
      setIsLoading(false);
    }
  };

  // Fun√ß√£o para lidar com expira√ß√£o autom√°tica da sess√£o
  const handleSessionExpired = async () => {
    await clearAuthData();
  };

  const clearAuthData = async () => {
    try {
      await AsyncStorage.removeItem('userData');
      await hybridAuthService.logout();
      // N√ÉO limpar credenciais locais aqui - elas devem persistir para login offline
      // await localAuthService.clearCredentials(); // Removido
      setUser(null);
      setIsAuthenticated(false);
    } catch (error) {
      console.error('‚ùå Erro ao limpar dados de autentica√ß√£o:', error);
    }
  };

  // Fun√ß√£o para sincroniza√ß√£o autom√°tica ap√≥s login online
  const performAutoSync = async (): Promise<void> => {
    try {
      console.log('üîÑ Iniciando sincroniza√ß√£o autom√°tica ap√≥s login online...');
      
      // Verificar se h√° itens pendentes para sincronizar
      const stats = await syncService.getStats();
      console.log('üìä Estat√≠sticas de sincroniza√ß√£o:', stats);
      
      if (stats.pending > 0) {
        console.log(`üîÑ Encontrados ${stats.pending} itens pendentes, iniciando sincroniza√ß√£o...`);
        
        // Executar sincroniza√ß√£o em background (n√£o bloquear a UI)
        setTimeout(async () => {
          try {
            const syncResult = await syncService.syncAllPendingLoads();
            console.log('‚úÖ Sincroniza√ß√£o autom√°tica conclu√≠da:', syncResult);
          } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o autom√°tica:', error);
          }
        }, 1000); // Aguardar 1 segundo para n√£o interferir no login
      } else {
        console.log('‚úÖ Nenhum item pendente para sincronizar');
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar itens pendentes:', error);
    }
  };

  const login = async (username: string, password: string): Promise<{ success: boolean; message: string }> => {
    try {
      setIsLoading(true);
      
('üîê Iniciando processo de login para:', username);
      
      // Usar sistema h√≠brido para login
      try {
        const hybridResult = await hybridAuthService.login(username, password);
        
        console.log('üåê Resultado do login h√≠brido:', {
          success: hybridResult.success,
          hasUser: !!hybridResult.user,
          hasCookie: !!hybridResult.sessionCookie,
          user: hybridResult.user
        });
        
        // Verificar se o login h√≠brido foi bem-sucedido
        if (hybridResult.success && hybridResult.user && hybridResult.sessionCookie) {
          // Login h√≠brido bem-sucedido - salvar credenciais localmente
          console.log('‚úÖ Login h√≠brido bem-sucedido, salvando credenciais...');
          
          const credentialsSaved = await localAuthService.saveCredentials(username, password, 'session_id');
          console.log('üíæ Credenciais salvas:', credentialsSaved);
          
          // Salvar dados do usu√°rio
          await AsyncStorage.setItem('userData', JSON.stringify(hybridResult.user));
          setUser(hybridResult.user);
          setIsAuthenticated(true);
          
          // Executar sincroniza√ß√£o autom√°tica ap√≥s login online bem-sucedido
          await performAutoSync();
          
          console.log('üéâ Login h√≠brido conclu√≠do com sucesso!');
          return { success: true, message: t('loginSuccess') };
        } else {
          console.log('‚ùå Login h√≠brido falhou - condi√ß√µes n√£o atendidas:', {
            success: hybridResult.success,
            hasUser: !!hybridResult.user,
            hasCookie: !!hybridResult.sessionCookie
          });
          // Login online falhou - tentar login offline
          const offlineResult = await localAuthService.validateOfflineLogin(username, password);
          
          if (offlineResult.success && offlineResult.credentials) {
            // Login offline bem-sucedido
            const userData: CloudUser = {
              id: 0, // ID tempor√°rio para login offline
              username: offlineResult.credentials.email,
              name: offlineResult.credentials.email,
              email: offlineResult.credentials.email,
              created_at: new Date().toISOString(),
              sessionId: offlineResult.credentials.sessionId
            };
            
            setUser(userData);
            setIsAuthenticated(true);
            
            return { success: true, message: t('loginSuccess') };
          } else {
            return { success: false, message: t('loginFailed') };
          }
        }
      } catch (hybridError) {
        console.log('‚ùå Erro no login h√≠brido:', hybridError);
        // Login h√≠brido falhou, tentando offline
        
        // Login online falhou - tentar login offline
        const offlineResult = await localAuthService.validateOfflineLogin(username, password);
        
        if (offlineResult.success && offlineResult.credentials) {
          // Login offline bem-sucedido
          const userData: CloudUser = {
            id: 0, // ID tempor√°rio para login offline
            username: offlineResult.credentials.email,
            name: offlineResult.credentials.email,
            email: offlineResult.credentials.email,
            created_at: new Date().toISOString(),
            sessionId: offlineResult.credentials.sessionId
          };
          
          setUser(userData);
          setIsAuthenticated(true);
          
          return { success: true, message: t('loginSuccess') };
        } else {
          return { success: false, message: hybridError instanceof Error ? hybridError.message : t('loginFailed') };
        }
      }
    } catch (error) {
      console.error('‚ùå Erro geral no login:', error);
      return { success: false, message: t('loginFailed') };
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async () => {
    try {
      setIsLoading(true);
('üö™ Fazendo logout...');
      await clearAuthData();
      await localAuthService.clearCredentials(); // Limpar credenciais SQLite no logout expl√≠cito
      setUser(null);
      setIsAuthenticated(false);
('‚úÖ Logout conclu√≠do');
    } catch (error) {
      console.error('‚ùå Erro no logout:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const checkSession = async (): Promise<boolean> => {
    try {
      // Usar o sistema h√≠brido para verificar se o usu√°rio est√° logado
      const isLoggedIn = hybridAuthService.isLoggedIn();
      
      if (!isLoggedIn) {
        await clearAuthData();
      }
      
      return isLoggedIn;
    } catch (error) {
      console.error('Erro ao verificar sess√£o:', error);
      await clearAuthData();
      return false;
    }
  };

  const value = {
    user,
    isAuthenticated,
    isLoading,
    login,
    logout,
    checkSession
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth deve ser usado dentro de AuthProvider');
  }
  return context;
}
